
import java.util.Scanner;

public class GestionPersonas
{ // Scanner est√°tico para entrada de datos - reutilizable en todos los m√©todos
    private static Scanner scanner = new Scanner(System.in);

    /**
     * M√âTODO PRINCIPAL - Punto de entrada del programa
     * Coordina la ejecuci√≥n de todas las funcionalidades mediante un men√∫ interactivo
     */
    public static void main(String[] args)
    {
        System.out.println("=== SISTEMA DE GESTI√ìN DE PERSONAS ===");
        System.out.println("Demostraci√≥n de Programaci√≥n Orientada a Objetos en Java\n");

        // Variable para almacenar las personas (inicialmente null)
        Persona[] personas = null;

        // Mostrar men√∫ principal y procesar opciones
        mostrarMenuPrincipal(personas);

        scanner.close();
    }

    /**
     * M√âTODO DE MEN√ö PRINCIPAL
     * Proporciona una interfaz interactiva para acceder a todas las funcionalidades
     * Demuestra el control de flujo y la interacci√≥n usuario-programa
     *
     * @param personas Arreglo de objetos Persona (puede ser null inicialmente)
     */
    public static void mostrarMenuPrincipal(Persona[] personas) {
        int opcion;

        do {
            // Mostrar opciones del men√∫
            System.out.println("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
            System.out.println("‚ïë          MEN√ö PRINCIPAL                ‚ïë");
            System.out.println("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
            System.out.println("‚ïë 1. Capturar datos de 5 personas       ‚ïë");
            System.out.println("‚ïë 2. Mostrar nombres y g√©neros          ‚ïë");
            System.out.println("‚ïë 3. Calcular promedio de edades        ‚ïë");
            System.out.println("‚ïë 4. Contar personas g√©nero masculino   ‚ïë");
            System.out.println("‚ïë 5. Contar personas g√©nero femenino    ‚ïë");
            System.out.println("‚ïë 6. Mostrar todas las personas         ‚ïë");
            System.out.println("‚ïë 7. Mostrar estad√≠sticas completas     ‚ïë");
            System.out.println("‚ïë 0. Salir del programa                 ‚ïë");
            System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
            System.out.print("Seleccione una opci√≥n (0-7): ");

            // Capturar y validar la opci√≥n elegida
            try {
                opcion = Integer.parseInt(scanner.nextLine().trim());

                // Procesar la opci√≥n seleccionada
                switch (opcion) {
                    case 1:
                        personas = capturarPersonas();
                        System.out.println("‚úì Datos capturados exitosamente!");
                        break;

                    case 2:
                        if (validarDatosExisten(personas)) {
                            mostrarNombresYGeneros(personas);
                        }
                        break;

                    case 3:
                        if (validarDatosExisten(personas)) {
                            mostrarPromedioEdades(personas);
                        }
                        break;

                    case 4:
                        if (validarDatosExisten(personas)) {
                            mostrarCantidadMasculinos(personas);
                        }
                        break;

                    case 5:
                        if (validarDatosExisten(personas)) {
                            mostrarCantidadFemeninos(personas);
                        }
                        break;

                    case 6:
                        if (validarDatosExisten(personas)) {
                            mostrarTodasLasPersonas(personas);
                        }
                        break;

                    case 7:
                        if (validarDatosExisten(personas)) {
                            mostrarEstadisticasCompletas(personas);
                        }
                        break;

                    case 0:
                        System.out.println("\nüîö Gracias por usar el Sistema de Gesti√≥n de Personas");
                        System.out.println("¬°Hasta luego!");
                        break;

                    default:
                        System.out.println("‚ùå Error: Opci√≥n no v√°lida. Por favor, seleccione una opci√≥n entre 0 y 7.");
                        break;
                }

                // Pausa para que el usuario pueda leer la informaci√≥n
                if (opcion != 0 && opcion >= 1 && opcion <= 7) {
                    System.out.print("\nPresione Enter para continuar...");
                    scanner.nextLine();
                }

            } catch (NumberFormatException e) {
                System.out.println("‚ùå Error: Por favor, ingrese un n√∫mero v√°lido.");
                opcion = -1; // Valor para continuar el ciclo
            }

        } while (opcion != 0);
    }

    /**
     * M√âTODO DE VALIDACI√ìN
     * Verifica si existen datos de personas antes de ejecutar operaciones
     * Implementa validaci√≥n de estado del programa
     *
     * @param personas Arreglo de objetos Persona a validar
     * @return boolean true si existen datos, false en caso contrario
     */
    public static boolean validarDatosExisten(Persona[] personas) {
        if (personas == null) {
            System.out.println("\n‚ö†Ô∏è  Advertencia: No hay datos de personas capturados.");
            System.out.println("   Por favor, seleccione la opci√≥n 1 primero para capturar los datos.");
            return false;
        }
        return true;
    }

    /**
     * M√âTODO DE ESTAD√çSTICAS COMPLETAS
     * Muestra un resumen completo de todas las estad√≠sticas disponibles
     * Demuestra la reutilizaci√≥n de m√©todos existentes
     *
     * @param personas Arreglo de objetos Persona
     */
    public static void mostrarEstadisticasCompletas(Persona[] personas) {
        System.out.println("\n" + "=".repeat(50));
        System.out.println("           ESTAD√çSTICAS COMPLETAS");
        System.out.println("=".repeat(50));

        // Reutilizar m√©todos existentes para mostrar informaci√≥n completa
        mostrarNombresYGeneros(personas);
        System.out.println("-".repeat(50));

        mostrarPromedioEdades(personas);
        System.out.println("-".repeat(50));

        System.out.println("--- DISTRIBUCI√ìN POR G√âNERO ---");
        int masculinos = contarMasculinos(personas);
        int femeninos = contarFemeninos(personas);
        int total = personas.length;

        System.out.println("üë® G√©nero Masculino: " + masculinos + " personas (" +
                String.format("%.1f", (masculinos * 100.0 / total)) + "%)");
        System.out.println("üë© G√©nero Femenino: " + femeninos + " personas (" +
                String.format("%.1f", (femeninos * 100.0 / total)) + "%)");
        System.out.println("üìä Total de personas: " + total);

        System.out.println("-".repeat(50));
        mostrarTodasLasPersonas(personas);
        System.out.println("=".repeat(50));
    }

    /**
     * M√âTODO b) Captura y retorna informaci√≥n de 5 personas
     *
     * Este m√©todo demuestra:
     * - Creaci√≥n de objetos usando el constructor
     * - Uso de arreglos para almacenar objetos
     * - Validaci√≥n b√°sica de entrada de datos
     *
     * @return Arreglo de objetos Persona con los datos capturados
     */
    public static Persona[] capturarPersonas() {
        System.out.println("\n" + "=".repeat(50));
        System.out.println("      üìù CAPTURA DE DATOS DE 5 PERSONAS");
        System.out.println("=".repeat(50));

        // Crear arreglo para almacenar 5 objetos Persona
        Persona[] personas = new Persona[5];

        // Ciclo para capturar datos de cada persona
        for (int i = 0; i < 5; i++) {
            System.out.println("\nüë§ Ingrese los datos de la persona " + (i + 1) + ":");
            System.out.println("-".repeat(30));

            // Captura del nombre
            System.out.print("üìõ Nombre: ");
            String nombre = scanner.nextLine().trim();

            // Captura del apellido
            System.out.print("üìù Apellido: ");
            String apellido = scanner.nextLine().trim();

            // Captura del g√©nero con validaci√≥n
            String genero;
            do {
                System.out.print("‚ö•  G√©nero (M/F): ");
                genero = scanner.nextLine().trim().toUpperCase();

                if (!genero.equals("M") && !genero.equals("F")) {
                    System.out.println("‚ùå Error: Ingrese 'M' para Masculino o 'F' para Femenino");
                }
            } while (!genero.equals("M") && !genero.equals("F"));

            // Captura de la edad con validaci√≥n
            int edad;
            do {
                System.out.print("üéÇ Edad: ");
                try {
                    edad = Integer.parseInt(scanner.nextLine().trim());
                    if (edad < 0 || edad > 150) {
                        System.out.println("‚ùå Error: La edad debe estar entre 0 y 150 a√±os");
                        edad = -1; // Valor inv√°lido para repetir el ciclo
                    }
                } catch (NumberFormatException e) {
                    System.out.println("‚ùå Error: Ingrese un n√∫mero v√°lido para la edad");
                    edad = -1; // Valor inv√°lido para repetir el ciclo
                }
            } while (edad < 0 || edad > 150);

            // CREACI√ìN DEL OBJETO - Uso del constructor para instanciar la clase Persona
            // Aqu√≠ se demuestra la instanciaci√≥n directa mediante constructor
            personas[i] = new Persona(nombre, apellido, genero, edad);

            System.out.println("‚úÖ Persona registrada exitosamente!");
        }

        System.out.println("\nüéâ ¬°Todas las personas han sido registradas correctamente!");
        return personas;
    }

    /**
     * M√âTODO b) Muestra nombres y g√©neros de todas las personas
     *
     * Demuestra el uso de m√©todos getter para acceder a datos encapsulados
     *
     * @param personas Arreglo de objetos Persona
     */
    public static void mostrarNombresYGeneros(Persona[] personas) {
        System.out.println("\nüìã NOMBRES Y G√âNEROS CAPTURADOS");
        System.out.println("-".repeat(40));

        for (int i = 0; i < personas.length; i++) {
            // Uso de m√©todos getter para acceder a los atributos privados
            String nombreCompleto = personas[i].getNombre() + " " + personas[i].getApellido();
            String genero = personas[i].getGenero().equals("M") ? "üë® Masculino" : "üë© Femenino";

            System.out.println((i + 1) + ". " + nombreCompleto + " - " + genero);
        }
    }

    /**
     * M√âTODO c) Calcula y retorna el promedio de edades
     *
     * Demuestra procesamiento de datos encapsulados usando m√©todos getter
     *
     * @param personas Arreglo de objetos Persona
     * @return double con el promedio de edades
     */
    public static double calcularPromedioEdades(Persona[] personas) {
        int sumaEdades = 0;

        // Recorrer todas las personas y sumar sus edades
        for (Persona persona : personas) {
            sumaEdades += persona.getEdad(); // Uso del m√©todo getter
        }

        // Calcular y retornar el promedio
        return (double) sumaEdades / personas.length;
    }

    /**
     * M√©todo auxiliar para mostrar el promedio de edades
     */
    public static void mostrarPromedioEdades(Persona[] personas) {
        double promedio = calcularPromedioEdades(personas);
        System.out.println("\nüìä PROMEDIO DE EDADES");
        System.out.println("-".repeat(30));
        System.out.printf("üéÇ El promedio de edades es: %.2f a√±os\n", promedio);
    }

    /**
     * M√âTODO d) Cuenta y retorna la cantidad de personas con g√©nero Masculino
     *
     * @param personas Arreglo de objetos Persona
     * @return int con la cantidad de hombres
     */
    public static int contarMasculinos(Persona[] personas) {
        int contador = 0;

        // Recorrer todas las personas y contar los masculinos
        for (Persona persona : personas) {
            if (persona.getGenero().equals("M")) {
                contador++;
            }
        }

        return contador;
    }

    /**
     * M√©todo auxiliar para mostrar cantidad de masculinos
     */
    public static void mostrarCantidadMasculinos(Persona[] personas) {
        int cantidad = contarMasculinos(personas);
        System.out.println("\nüë® ESTAD√çSTICA - G√âNERO MASCULINO");
        System.out.println("-".repeat(35));
        System.out.println("Cantidad de personas de g√©nero Masculino: " + cantidad);
    }

    /**
     * M√âTODO e) Cuenta y retorna la cantidad de personas con g√©nero Femenino
     *
     * @param personas Arreglo de objetos Persona
     * @return int con la cantidad de mujeres
     */
    public static int contarFemeninos(Persona[] personas) {
        int contador = 0;

        // Recorrer todas las personas y contar los femeninos
        for (Persona persona : personas) {
            if (persona.getGenero().equals("F")) {
                contador++;
            }
        }

        return contador;
    }

    /**
     * M√©todo auxiliar para mostrar cantidad de femeninos
     */
    public static void mostrarCantidadFemeninos(Persona[] personas) {
        int cantidad = contarFemeninos(personas);
        System.out.println("\nüë© ESTAD√çSTICA - G√âNERO FEMENINO");
        System.out.println("-".repeat(35));
        System.out.println("Cantidad de personas de g√©nero Femenino: " + cantidad);
    }

    /**
     * M√©todo adicional para mostrar todas las personas registradas
     * Demuestra el uso del m√©todo toString sobrescrito
     */
    public static void mostrarTodasLasPersonas(Persona[] personas) {
        System.out.println("\nüìÑ RESUMEN DE TODAS LAS PERSONAS REGISTRADAS");
        System.out.println("=".repeat(50));
        for (int i = 0; i < personas.length; i++) {
            System.out.println((i + 1) + ". " + personas[i].toString());
        }
    }
}
